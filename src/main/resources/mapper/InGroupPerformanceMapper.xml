<?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kkcloud.trainee.system.mapper.InGroupPerformanceMapper">

    <resultMap id="IGPmodel" type="com.kkcloud.trainee.system.model.IGPModel">
        <result column="user_username" property="username"/>
        <result column="role_title" property="role"/>
        <result column="group_name" property="group"/>
        <result column="average_teamwork" property="average_teamwork"/>
        <result column="average_work_attitude" property="average_work_attitude"/>
        <result column="average_personal_growth" property="average_personal_growth"/>
        <result column="average_professional_level" property="average_professional_level"/>
        <result column="average_work_under_pressure" property="average_work_under_pressure"/>
        <result column="total_points" property="total_points"/>
        <result column="ranking_score" property="ranking_score"/>
    </resultMap>

    <resultMap id="linesOfCodesMap" type="com.kkcloud.trainee.system.model.LOCModel">
        <result column="user_username" property="user_username"/>
        <result column="group_name" property="group_name"/>
        <result column="total_lines_of_codes" property="total_lines_of_codes"/>
        <result column="total_lines_of_codes_rate" property="total_lines_of_codes_rate"/>
    </resultMap>

    <insert id="ingroupperf">
        INSERT INTO tbl_trainee_in_group_evaluation
        (
            trainee_evaluation_id,
            evaluator_user_id,
            work_attitude,
            professional_level,
            personal_growth,
            teamwork,
            work_under_pressure,
            created_by,
            updated_by,
            created_at,
            update_at
        )
        VALUES
        (
            #{traineeEvaluationId},
            #{evaluatorUserId},
            #{workAttitude},
            #{professionalLevel},
            #{personalGrowth},
            #{teamwork},
            #{workUnderPressure},
            #{createdBy},
            #{createdBy},
            #{createdAt},
            #{createdAt}
        )
    </insert>

    <select id="getInGroupPerformanceList" resultMap="IGPmodel">
        WITH tbl_temp AS (
            SELECT tbl_user.user_username, t2.role_title, t4.group_name, AVG(teamwork) as average_teamwork, AVG(work_attitude) as average_work_attitude, AVG(personal_growth) as                    average_personal_growth, AVG(professional_level) as average_professional_level, AVG(work_under_pressure) as average_work_under_pressure,
                   (AVG(work_attitude) + AVG(professional_level) + AVG(personal_growth) + AVG(teamwork) + AVG(work_under_pressure)) as Total_points,
                   ROW_NUMBER() OVER(ORDER BY (AVG(work_attitude) + AVG(professional_level) + AVG(personal_growth) + AVG(teamwork)+ AVG(work_under_pressure)) DESC )
                   RowNumber
            FROM tbl_trainee_in_group_evaluation
                     INNER JOIN tbl_trainee_evaluation as t5 on tbl_trainee_in_group_evaluation.trainee_evaluation_id  = t5.trainee_evaluation_id
                     INNER JOIN tbl_user on t5.trainee_user_id = tbl_user.user_id
                     INNER JOIN tbl_role as t2 on tbl_user.role_id = t2.role_id
                     INNER JOIN tbl_team as t3 on tbl_user.team_id = t3.team_id
                     INNER JOIN tbl_group as t4 on t4.group_id = t3.group_id
            WHERE EXTRACT(YEAR_MONTH FROM tbl_trainee_in_group_evaluation.update_at) = #{traineeEvaluationDate}
            GROUP BY user_username, role_title, group_name
        )
        SELECT user_username, role_title, group_name, average_teamwork, average_work_attitude, average_personal_growth, average_professional_level, average_work_under_pressure, total_points,
               CASE
                   WHEN RowNumber =1 THEN 20
                   WHEN RowNumber =2 THEN 15
                   WHEN RowNumber =3 THEN 10
                   ELSE 5
                   END AS ranking_score
        FROM tbl_temp
    </select>


    <select id="getInGroupPerformanceList1" resultMap="IGPmodel">
        WITH tbl_temp AS (
            SELECT tbl_user.user_username, t2.role_title, t4.group_name, AVG(teamwork) as average_teamwork, AVG(work_attitude) as average_work_attitude, AVG(personal_growth) as                    average_personal_growth, AVG(professional_level) as average_professional_level, AVG(work_under_pressure) as average_work_under_pressure,
                   (AVG(work_attitude) + AVG(professional_level) + AVG(personal_growth) + AVG(teamwork) + AVG(work_under_pressure)) as Total_points,
                   ROW_NUMBER() OVER(ORDER BY (AVG(work_attitude) + AVG(professional_level) + AVG(personal_growth) + AVG(teamwork)+ AVG(work_under_pressure)) DESC )
                   RowNumber
            FROM tbl_trainee_in_group_evaluation
                     INNER JOIN tbl_trainee_evaluation as t5 on tbl_trainee_in_group_evaluation.trainee_evaluation_id  = t5.trainee_evaluation_id
                     INNER JOIN tbl_user on t5.trainee_user_id = tbl_user.user_id
                     INNER JOIN tbl_role as t2 on tbl_user.role_id = t2.role_id
                     INNER JOIN tbl_team as t3 on tbl_user.team_id = t3.team_id
                     INNER JOIN tbl_group as t4 on t4.group_id = t3.group_id
            WHERE EXTRACT(YEAR_MONTH FROM tbl_trainee_in_group_evaluation.update_at) = #{traineeEvaluationDate}
            GROUP BY user_username, role_title, group_name
        )
        SELECT user_username, role_title, group_name, average_teamwork, average_work_attitude, average_personal_growth, average_professional_level, average_work_under_pressure, total_points,
               CASE
                   WHEN RowNumber =1 THEN 20
                   WHEN RowNumber =2 THEN 15
                   WHEN RowNumber =3 THEN 10
                   ELSE 5
                   END AS ranking_score
        FROM tbl_temp

        WHERE user_username = #{traineeUserName}
    </select>

    <select id="getInGroupPerformanceList2" resultMap="IGPmodel">
        WITH tbl_temp AS (
            SELECT tbl_user.user_username, t2.role_title, t4.group_name, AVG(teamwork) as average_teamwork, AVG(work_attitude) as average_work_attitude, AVG(personal_growth) as                    average_personal_growth, AVG(professional_level) as average_professional_level, AVG(work_under_pressure) as average_work_under_pressure,
                   (AVG(work_attitude) + AVG(professional_level) + AVG(personal_growth) + AVG(teamwork) + AVG(work_under_pressure)) as Total_points,
                   ROW_NUMBER() OVER(ORDER BY (AVG(work_attitude) + AVG(professional_level) + AVG(personal_growth) + AVG(teamwork)+ AVG(work_under_pressure)) DESC )
                   RowNumber
            FROM tbl_trainee_in_group_evaluation
                     INNER JOIN tbl_trainee_evaluation as t5 on tbl_trainee_in_group_evaluation.trainee_evaluation_id  = t5.trainee_evaluation_id
                     INNER JOIN tbl_user on t5.trainee_user_id = tbl_user.user_id
                     INNER JOIN tbl_role as t2 on tbl_user.role_id = t2.role_id
                     INNER JOIN tbl_team as t3 on tbl_user.team_id = t3.team_id
                     INNER JOIN tbl_group as t4 on t4.group_id = t3.group_id
            WHERE EXTRACT(YEAR_MONTH FROM tbl_trainee_in_group_evaluation.update_at) = #{traineeEvaluationDate}
            GROUP BY user_username, role_title, group_name
        )
        SELECT user_username, role_title, group_name, average_teamwork, average_work_attitude, average_personal_growth, average_professional_level, average_work_under_pressure, total_points,
               CASE
                   WHEN RowNumber =1 THEN 20
                   WHEN RowNumber =2 THEN 15
                   WHEN RowNumber =3 THEN 10
                   ELSE 5
                   END AS ranking_score
        FROM tbl_temp
    </select>

    <select id="getLinesOfCodesList" resultMap="linesOfCodesMap">
        SELECT tbl_user.user_username, tbl_group.group_name, total_lines_of_codes, total_lines_of_codes_rate

        from tbl_trainee_evaluation
                 INNER JOIN tbl_user on tbl_trainee_evaluation.trainee_user_id = tbl_user.user_id
                 INNER JOIN tbl_team ON tbl_user.team_id = tbl_team.team_id
                 INNER JOIN tbl_group ON tbl_team.group_id = tbl_group.group_id
        WHERE department_id = 1 AND EXTRACT(YEAR_MONTH FROM trainee_evaluation_date) = #{traineeEvaluationDate}
        ORDER BY total_lines_of_codes DESC,total_lines_of_codes_rate DESC
    </select>

    <select id="existById" resultType="com.kkcloud.trainee.system.DTO.InGroupPerformanceDTO">
        SELECT
            trainee_evaluation_id
        FROM
            tbl_trainee_evaluation
        WHERE
            trainee_user_id = #{traineeUserId} AND EXTRACT(YEAR_MONTH FROM trainee_evaluation_date) = #{traineeEvaluationDate}

    </select>

    <!--<select id="selectUserByRole" resultType="boolean">
        SELECT EXISTS (
            SELECT
                u.user_id FROM
                tbl_user AS u
            INNER JOIN
                tbl_trainee_evaluation AS te ON te.trainee_user_id = u.user_id
            WHERE
                role_id = 3 AND user_id= #{traineeUserId}
        ) AS boolean
    </select>-->

    <select id="selectUserByRole" resultType="boolean">
        SELECT EXISTS (
                       SELECT
                           u.user_id FROM
                           tbl_user AS u
                               INNER JOIN
                           tbl_trainee_evaluation AS te ON te.trainee_user_id = u.user_id
                       WHERE
                           u.role_id = 3 AND u.user_id= #{traineeUserId} AND EXTRACT(YEAR_MONTH FROM te.trainee_evaluation_date) = #{traineeEvaluationDate}
                   ) AS boolean
    </select>

    <insert id="insertRecord">
        INSERT INTO tbl_trainee_evaluation
            (
            trainee_user_id,
            trainee_evaluation_date,
            created_At
            )
        VALUES
            (
             #{traineeUserId},
             #{createdAt},
             #{createdAt}
             )
    </insert>

    <insert id="ingroupperfNewTraineeId">
        INSERT INTO tbl_trainee_in_group_evaluation
        (
            trainee_evaluation_id,
            evaluator_user_id,
            work_attitude,
            professional_level,
            personal_growth,
            teamwork,
            work_under_pressure,
            created_by,
            updated_by,
            created_at,
            update_at
        )
        VALUES
        (
            (SELECT trainee_evaluation_id FROM tbl_trainee_evaluation WHERE trainee_user_id = #{traineeUserId} AND EXTRACT(YEAR_MONTH FROM trainee_evaluation_date) = #{traineeEvaluationDate}),
            #{evaluatorUserId},
            #{workAttitude},
            #{professionalLevel},
            #{personalGrowth},
            #{teamwork},
            #{workUnderPressure},
            #{createdBy},
            #{createdBy},
            #{createdAt},
            #{createdAt}
        )

    </insert>

    <select id="selectUser" resultType="boolean">
        SELECT EXISTS (
            SELECT
                user_id
            FROM
                tbl_user
            WHERE
                role_id = 3 and user_id = #{traineeUserId}
        ) AS boolean
    </select>

    <select id="checkIfExistingUser" resultType="java.lang.Boolean">
        SELECT EXISTS (
            SELECT
                trainee_evaluation_id
            FROM
                tbl_trainee_evaluation
            WHERE
                trainee_user_id= #{traineeUserId} AND EXTRACT(YEAR_MONTH FROM trainee_evaluation_date) = #{traineeEvaluationDate}
        ) AS boolean
    </select>

</mapper>
